use reqwest::StatusCode;
use serde_derive::Serialize;
use uuid::Uuid;

use crate::auth::AuthenticateBuilder;
use crate::error::{Error, Result};
use crate::refresh::RefreshBuilder;
use crate::types::{serialize_uuid_simple, Profile};

/// A Minecraft authentication session with `access_token` and `client_token`
/// saved.
#[derive(Debug)]
pub struct Session {
    access_token: String,
    client_token: Uuid,
    profile: Profile,
}

#[derive(Debug, Serialize)]
#[serde(rename_all = "camelCase")]
struct JoinRequest<'a> {
    access_token: &'a str,

    // `selectedProfile` must be serialized without hyphens
    #[serde(serialize_with = "serialize_uuid_simple")]
    selected_profile: Uuid,

    server_id: &'a str,
}

impl Session {
    /// Use saved `access_token` to create a session.
    ///
    /// ```no_run
    /// # use sage_auth::session::Session;
    /// # use sage_auth::error::Result;
    /// # use uuid::Uuid;
    /// # async fn anonymous() -> Result<()> {
    /// let session = Session::from_token("ACCESS_TOKEN", Uuid::new_v4()).await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn from_token<S: Into<String>>(
        access_token: S,
        client_token: Uuid,
    ) -> Result<Session> {
        let access_token = access_token.into();

        let refresh_response = RefreshBuilder::new()
            .access_token(&access_token)
            .client_token(client_token)
            .request()
            .await?;

        Ok(Session {
            access_token,
            client_token,
            profile: refresh_response.selected_profile.unwrap(),
        })
    }

    /// Login to create a session.
    ///
    /// ```no_run
    /// # use sage_auth::session::Session;
    /// # use sage_auth::error::Result;
    /// # async fn anonymous() -> Result<()> {
    /// let session = Session::login("USERNAME", "PASSWORD").await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn login(username: &str, password: &str) -> Result<Session> {
        let auth_response = AuthenticateBuilder::new()
            .username(username)
            .password(password)
            .request()
            .await?;

        Ok(Session {
            access_token: auth_response.access_token,
            client_token: auth_response.client_token,
            profile: auth_response.selected_profile.unwrap(),
        })
    }

    /// Post a join message to Mojang session server.
    ///
    /// Note: `server_id_hash` is generated by a special hash function,
    /// which can be found in [wiki.vg](https://wiki.vg/Protocol_Encryption#Authentication)
    ///
    /// ```no_run
    /// # use sage_auth::session::Session;
    /// # use sage_auth::error::Result;
    /// # async fn anonymous() -> Result<()> {
    /// let session = Session::login("USERNAME", "PASSWORD").await?;
    /// let server_hash = "...";
    ///
    /// session.join_server(server_hash).await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn join_server(&self, server_id_hash: &str) -> Result<()> {
        let request = JoinRequest {
            access_token: &self.access_token,
            selected_profile: self.profile.id,
            server_id: server_id_hash,
        };

        let client = reqwest::Client::new();
        let response = client
            .post("https://sessionserver.mojang.com/session/minecraft/join")
            .json(&request)
            .send()
            .await?;

        match response.status() {
            StatusCode::NO_CONTENT => Ok(()),
            _ => Err(Error::from_response(response).await),
        }
    }

    /// Get `access_token`
    pub async fn get_access_token(&self) -> &str {
        &self.access_token
    }

    /// Get `client_token`
    pub async fn get_client_token(&self) -> Uuid {
        self.client_token
    }
}
